{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","useState","setMonsters","searchField","setSearchField","useEffect","fetch","then","response","json","users","filteredMonsters","filter","toLowerCase","includes","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oSAIe,SAASA,EAAT,GAA4B,IAAZC,EAAW,EAAXA,QAC7B,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,sCAA0BH,QAA1B,IAA0BA,OAA1B,EAA0BA,EAASI,GAAnC,4BACtB,oCAAKJ,QAAL,IAAKA,OAAL,EAAKA,EAASK,OACd,mCAAIL,QAAJ,IAAIA,OAAJ,EAAIA,EAASM,W,UCQJC,EAZE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,OACE,qBAAKP,UAAU,YAAf,gBACGO,QADH,IACGA,OADH,EACGA,EAAUC,KAAI,SAACT,GAAD,OACb,8BACE,cAACD,EAAD,CAAMC,QAASA,KADjB,OAAUA,QAAV,IAAUA,OAAV,EAAUA,EAASI,U,MCLZ,SAASM,EAAT,GAAmD,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aAC/C,OAAO,uBAAOX,UAAU,SAASY,KAAK,SAASF,YAAaA,EAAaG,SAAUF,I,MCuBtEG,MAtBf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNR,EADM,KACIS,EADJ,OAEyBD,mBAAS,IAFlC,mBAENE,EAFM,KAEOC,EAFP,KAIbC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAWR,EAAYQ,QAC9B,IAEH,IAAIC,EAAmBlB,EAASmB,QAAO,SAAC3B,GAAD,oBACrCA,QADqC,IACrCA,GADqC,UACrCA,EAASK,YAD4B,aACrC,EAAeuB,cAAcC,SAA7B,OAAsCX,QAAtC,IAAsCA,OAAtC,EAAsCA,EAAaU,kBAErD,OACE,sBAAK3B,UAAU,MAAf,UACE,kDACA,cAACS,EAAD,CAAWC,YAAY,iBAAiBC,aAAc,SAACkB,GAAD,OAAOX,EAAeW,EAAEC,OAAOC,UACrF,cAAC,EAAD,CAAUxB,SAAUkB,QCXXO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d50a6b2b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport default function Card({ monster }) {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img alt=\"monster\" src={`https://robohash.org/${monster?.id}?set=set2&size=180x180`} />\r\n      <h2>{monster?.name}</h2>\r\n      <p>{monster?.email}</p>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport Card from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nconst CardList = ({ monsters }) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {monsters?.map((monster) => (\r\n        <div key={monster?.id}>\r\n          <Card monster={monster} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nimport './search-box.style.css';\r\n\r\nexport default function SearchBox({ placeholder, handleChange }) {\r\n  return <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange} />;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport CardList from './components/card-list/card-list.component';\r\nimport SearchBox from './components/search-box/search-box.component';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [monsters, setMonsters] = useState([]);\r\n  const [searchField, setSearchField] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then((response) => response.json())\r\n      .then((users) => setMonsters(users));\r\n  }, []);\r\n\r\n  let filteredMonsters = monsters.filter((monster) =>\r\n    monster?.name?.toLowerCase().includes(searchField?.toLowerCase())\r\n  );\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Monsters Rolodex</h1>\r\n      <SearchBox placeholder=\"Search Monster\" handleChange={(e) => setSearchField(e.target.value)} />\r\n      <CardList monsters={filteredMonsters} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}